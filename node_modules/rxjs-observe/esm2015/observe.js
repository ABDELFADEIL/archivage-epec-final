import { BehaviorSubject, Subject } from "rxjs";
export function observe(instance, callbacks) {
    const fallbacks = callbacks || {};
    const functions = new Map();
    const subjects = new Map();
    const proxy = new Proxy(instance, {
        get(target, name) {
            const fallbackValue = fallbacks[name];
            const targetValue = target[name];
            let value = fallbackValue && !targetValue ? fallbackValue : targetValue;
            if (typeof value === "function") {
                const functionValue = value;
                let functionWrapper = functions.get(functionValue);
                if (!functionWrapper) {
                    functionWrapper = function (...args) {
                        const result = functionValue.apply(this, args);
                        const subject = subjects.get(name);
                        if (subject) {
                            subject.next(args);
                        }
                        return result;
                    };
                    functions.set(functionValue, functionWrapper);
                }
                value = functionWrapper;
            }
            return value;
        },
        getOwnPropertyDescriptor(target, name) {
            return (Object.getOwnPropertyDescriptor(target, name) ||
                Object.getOwnPropertyDescriptor(fallbacks, name));
        },
        has(target, name) {
            return name in target || name in fallbacks;
        },
        ownKeys(target) {
            return [...Reflect.ownKeys(target), ...Reflect.ownKeys(fallbacks)];
        },
        set(target, name, value) {
            target[name] = value;
            const subject = subjects.get(name);
            if (subject) {
                subject.next(value);
            }
            return true;
        }
    });
    return {
        observables: new Proxy({}, {
            get(target, name) {
                let subject = subjects.get(name);
                if (!subject) {
                    subject =
                        typeof instance[name] === "function" ||
                            typeof fallbacks[name] === "function"
                            ? new Subject()
                            : new BehaviorSubject(instance[name]);
                    subjects.set(name, subject);
                }
                return subject.asObservable();
            }
        }),
        proxy
    };
}
export function callback() {
    return (() => { });
}
