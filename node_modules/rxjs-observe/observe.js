"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
function observe(instance, callbacks) {
    var fallbacks = callbacks || {};
    var functions = new Map();
    var subjects = new Map();
    var proxy = new Proxy(instance, {
        get: function (target, name) {
            var fallbackValue = fallbacks[name];
            var targetValue = target[name];
            var value = fallbackValue && !targetValue ? fallbackValue : targetValue;
            if (typeof value === "function") {
                var functionValue_1 = value;
                var functionWrapper = functions.get(functionValue_1);
                if (!functionWrapper) {
                    functionWrapper = function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        var result = functionValue_1.apply(this, args);
                        var subject = subjects.get(name);
                        if (subject) {
                            subject.next(args);
                        }
                        return result;
                    };
                    functions.set(functionValue_1, functionWrapper);
                }
                value = functionWrapper;
            }
            return value;
        },
        getOwnPropertyDescriptor: function (target, name) {
            return (Object.getOwnPropertyDescriptor(target, name) ||
                Object.getOwnPropertyDescriptor(fallbacks, name));
        },
        has: function (target, name) {
            return name in target || name in fallbacks;
        },
        ownKeys: function (target) {
            return __spreadArrays(Reflect.ownKeys(target), Reflect.ownKeys(fallbacks));
        },
        set: function (target, name, value) {
            target[name] = value;
            var subject = subjects.get(name);
            if (subject) {
                subject.next(value);
            }
            return true;
        }
    });
    return {
        observables: new Proxy({}, {
            get: function (target, name) {
                var subject = subjects.get(name);
                if (!subject) {
                    subject =
                        typeof instance[name] === "function" ||
                            typeof fallbacks[name] === "function"
                            ? new rxjs_1.Subject()
                            : new rxjs_1.BehaviorSubject(instance[name]);
                    subjects.set(name, subject);
                }
                return subject.asObservable();
            }
        }),
        proxy: proxy
    };
}
exports.observe = observe;
function callback() {
    return (function () { });
}
exports.callback = callback;
